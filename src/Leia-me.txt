Incluindo via CDN bootstrap:
Site: https://getbootstrap.com/

------------------------------------------------------- // -------------------------------------------------------

Para trabalhar com formulário temos que fazer o import do FormsModule.

No Angular, o `FormsModule` é um módulo que faz parte do pacote `@angular/forms` e é usado para trabalhar com 
formulários e realizar a vinculação de dados bidirecional (two-way data binding) entre os elementos do formulário 
e o modelo de dados da aplicação.

Quando você está construindo um aplicativo Angular com formulários, o `FormsModule` é uma dependência essencial que 
deve ser importada no módulo raiz ou em outros módulos onde você deseja usar formulários. Ele oferece diversas 
diretivas e recursos para simplificar o trabalho com formulários HTML e permite realizar a validação dos dados 
inseridos pelos usuários.

Alguns dos recursos fornecidos pelo `FormsModule` incluem:

1. Vinculação de dados bidirecional: Com as diretivas fornecidas pelo `FormsModule`, você pode vincular os dados do
 modelo de dados do Angular aos elementos do formulário. Isso significa que as alterações feitas nos elementos do 
 formulário são refletidas no modelo de dados e vice-versa.

2. Validação de formulários: O `FormsModule` suporta a validação de dados de entrada em tempo real. Você pode 
definir regras de validação para campos de formulário, como requerido, mínimo e máximo de caracteres, padrões 
personalizados, entre outros.

3. Rastreamento do estado de validação: As diretivas do `FormsModule` fornecem uma maneira de rastrear o estado de 
validação de cada campo de formulário. Isso permite que você saiba se o campo é válido, inválido, sujo (modificado 
pelo usuário) ou intocado.

4. Tratamento de eventos: O `FormsModule` também gerencia eventos como envio de formulário, clique em botões de 
envio e redefinição, e permite que você responda a esses eventos em seu código.

Depois de importar o módulo, você pode começar a usar as diretivas do `FormsModule`, como `ngModel`, `ngForm`, 
`ngSubmit`, entre outras, para criar e trabalhar com formulários no Angular.

Em resumo, o `FormsModule` é uma parte importante do Angular para trabalhar com formulários, fornecendo uma maneira 
conveniente de vincular dados e validar informações do usuário em seus aplicativos.

----------//----------
Anotações: NgModel e Formulário

As variaveis declaradas 'login' e 'senha' no 'app.component.ts' corresponde ao mesmo nome das variáveis declaradas
na nossa API do Spring Boot, exemplificando:
usuario = {login: '', senha: ''};

Para ligar essas variáveis no formulário vamos utilizar as diretivas ngmodel, exemplificando:
[(ngModel)]="usuario.login"
[(ngModel)]="usuario.senha"

A ação vai ser gerada pelo botão através do (click), exemplificando:
(click)="login()"

------------------------------------------------------- // -------------------------------------------------------

Vamos fazer agora a autenticação do JWT do Sprig Boot com o Angular API REST.
Analisando: Para fazer o login temos que passar pelo o nosso back-end e capturar o token, depois ligá-lo ao nosso
front-end (Angular), para só então poder ser enviado para a nossa API REST.

Para iniciar vamos criar um app-constants - Comandos no terminal:

PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular> cd .\Projeto-Angular-REST\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST> cd .\src\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src> cd .\app\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app> ng generate class AppConstants --skipTests=true 

O objetivo de criar esse arquivo é para vincular a porta 8080 e o context path 'projetospringrestapi' da nossa API Rest.

Código para analisar: 
public static get baseLogin(): string {return this.baseServidor + "projetospringrestapi/login"}

 -> get: A palavra-chave get é usada para definir um método getter. Um getter é um método especial que permite acessar o 
    valor de uma propriedade como se fosse uma propriedade de leitura.

 -> baseLogin: Este é o nome do getter. É a propriedade que será acessada como se fosse uma propriedade de leitura.

 -> (): string: Isso indica que o getter não tem parâmetros e que ele retorna uma string.

 ----------//----------

Para trabalhar com chamadas HTTP (requisição ajax) para servidores e consumir APIs RESTful vamos fazer um import 
HttpClientModule.

No Angular, o HttpClientModule é um módulo que faz parte do pacote @angular/common/http. Ele fornece um serviço 
chamado HttpClient, que é usado para fazer chamadas HTTP para servidores e consumir APIs RESTful ou outros recursos 
baseados em HTTP.

O HttpClientModule é uma melhoria em relação ao antigo HttpModule, que foi usado nas versões mais antigas do Angular. 
O HttpClientModule é baseado em Observables e oferece uma maneira mais moderna e poderosa de trabalhar com solicitações 
e respostas HTTP.

O HttpClient fornece uma variedade de métodos para diferentes tipos de solicitações HTTP, como get(), post(), put(), 
delete(), entre outros. Ele também permite que você envie cabeçalhos personalizados, parâmetros de consulta e corpos 
de requisição.

Lembre-se de que, para usar o HttpClient, você precisa adicionar o pacote @angular/common/http ao seu projeto, o que 
é normalmente feito por padrão ao criar um novo projeto Angular.

----------//----------

Vamos criar um service para implementar o login. Para criar vamos ao terminal - comandos:

PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular> cd .\Projeto-Angular-REST\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST> cd .\src\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src> cd .\app\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app> cd .\service\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app\service> ng generate service LoginService --skipTests=true

Com o service criado vamos analisar esse código implementado: 
constructor(private http: HttpClient) { }

Esse script está definindo o construtor da classe HttpClient.

1. `constructor`: O construtor é um método especial de uma classe que é chamado automaticamente quando uma instância 
da classe é criada. É usado para inicializar a classe e seus membros.

2. `private http: HttpClient`: Aqui, estamos definindo um parâmetro chamado `http`, que tem o tipo `HttpClient`. A 
declaração `private` antes do nome do parâmetro indica que essa variável será um membro privado da classe. Ou seja, 
ela não será acessível fora da classe. 

Aqui, estamos usando o padrão de injeção de dependência do Angular. Quando você inclui um parâmetro no construtor de 
uma classe e especifica um tipo para esse parâmetro (como `HttpClient`), o Angular irá automaticamente fornecer uma 
instância daquele tipo quando criar uma instância da classe.

No caso específico do construtor apresentado, o `HttpClient` é um serviço do Angular usado para fazer chamadas HTTP 
a servidores e consumir APIs RESTful ou outros recursos baseados em HTTP. Ele é responsável por gerenciar e executar 
solicitações HTTP, como GET, POST, PUT, DELETE, etc.

Ao declarar o parâmetro `private http: HttpClient` no construtor, você está injetando o serviço `HttpClient` na 
classe. Isso permite que você use o `HttpClient` para fazer solicitações HTTP em qualquer método da classe. 

Esse padrão de injeção de dependência do Angular torna a criação de serviços e a interação com outras partes da 
aplicação mais fácil e flexível. Além disso, ajuda a facilitar a manutenção e o teste das classes, tornando-as menos 
acopladas e mais reutilizáveis.

----------//----------

Em 'app.component.ts vamos analisar' esse código implementado:
constructor(private loginService: LoginServiceService){}

Esse script está definindo o construtor dessa classe.

1. `constructor`: O construtor é um método especial de uma classe que é chamado automaticamente quando uma instância 
da classe é criada. É usado para inicializar a classe e seus membros.

2. `private loginService: LoginServiceService`: Aqui, estamos definindo um parâmetro chamado `loginService`, que tem 
o tipo `LoginServiceService`. A declaração `private` antes do nome do parâmetro indica que essa variável será um 
membro privado da classe. Ou seja, ela não será acessível fora da classe. Geralmente, é uma prática comum tornar 
serviços injetados em componentes ou outros serviços privados.

Quando uma instância dessa classe for criada, o Angular automaticamente criará uma instância do `LoginServiceService` 
e a injetará na propriedade `loginService`, tornando o serviço disponível para uso dentro dessa classe. Isso permite 
que você utilize o serviço `LoginServiceService` para executar suas operações e chamar métodos fornecidos por esse 
serviço.

----------//----------

No método login(usuario:any){...}

Vale ressaltar que os valores na tela não vem em formato de json (e sim em typescript), por exemplo, 
{login: "admin" e senha: "123"}

Já a nossa API Rest vem em formato de json, por exemplo, 
{"login": "admin" e "senha": "123"}

Repare os atributos vem entre aspas, lgo para resolver essa diferença teremos que manipular o código da seguinte maneira:
JSON.stringify(usuario)

Outro ponto que vale ressaltar que o acesso a login vem acompanhado com um token, porém antes teremos que resolver as 
incompatibilidades entre os servidores diferentes do back-end (API SpringBoot - 8080) e o front-end (angular - 4200) 
que são os cors. Os cors são gerado pelos navegadores e para resolver isso temos que fazer validações na API Rest
jogando como resposta os cors gerados no navegador. Por exemplo, na nossa API Rest SpringBoot serão tratados da 
seguinte maneira na classe de autenticação do token:

private void liberacaoCors(HttpServletResponse response) {
		if(response.getHeader("Access-Control-Allow-Origin") == null) {
			response.addHeader("Access-Control-Allow-Origin", "*");
		}
		
		if(response.getHeader("Access-Control-Allow-Headers") == null) {
			response.addHeader("Access-Control-Allow-Headers", "*");
		}
		
		if(response.getHeader("Access-Control-Request-Headers") == null) {
			response.addHeader("Access-Control-Request-Headers", "*");
		}
		
		// Liberando Cors para deletar o usuario
		if(response.getHeader("Access-Control-Allow-Methods") == null) {
			response.addHeader("Access-Control-Allow-Methods", "*");
		}
}


Voltando a parte do token, vale ressaltar que além dos dados (login e senha) do usuário vem com um token acompanhado,
é possível visualizar esse token através do código: 
console.info(JSON.parse(JSON.stringify(data)));

O token vem da seguinte maneira:
{Authorization: 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsIm…2MdpscpsxR2zgIpPYmfiMnc-DJEcYechoUcHu0pzb8rN0rSvQ'}

Podemos capturar até o Bearer com o código:
console.info(JSON.parse(JSON.stringify(data)).Authorization);
Vai vir assim: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTY5MTEzMzI5M30.zpt5fWMOM6GWP7ApY9Av3hW7iq8kVcFPWMizv1fQH-KP7xNilfo9eoTaRs27eAKCvxKu7HxUsFIJ3wCGdqeq3Q

E podemos capturar apenas o token que é o que nos interessa, porém vale destacar que existe um espaço vazio entre a 
palavra 'Bearer' e o 'token' como pode ser visto no código da nossa API Rest Spring Boot: 
String token = TOKEN_PREFIX + " " + JWT; 

Vale ressaltar que o espaço vai ser utilizado o método split(). Portanto, para capturar apenas o token o código vai 
ser assim:
console.info(JSON.parse(JSON.stringify(data)).Authorization.split(' ')[1]);

------------------------------------------------------- // -------------------------------------------------------
Routes (Rotas)

O angular para fazer um redirecionamento de uma página para outra é utilizado o routes. No angular é feito um mapeamento 
na url que quer redirecionar (isso é dentro do angular) e tudo isso de forma interna.

No Angular, as rotas (routes) são um mecanismo poderoso para navegação e para tornar o aplicativo uma Single Page 
Application (SPA). As rotas permitem que você altere a visualização do conteúdo com base na URL atual do navegador, 
sem precisar recarregar a página inteira. Isso proporciona uma experiência de usuário mais fluida e responsiva.

As rotas no Angular são gerenciadas pelo módulo RouterModule, que faz parte do pacote @angular/router. Para utilizar 
as rotas em seu aplicativo Angular, é necessário importar e configurar o RouterModule no módulo raiz (geralmente no 
arquivo app.module.ts) e definir as rotas para os diferentes componentes da aplicação.

A configuração das rotas envolve duas etapas principais:

Definir as rotas no módulo de rotas:

Primeiro, você precisa definir as rotas que correspondem às diferentes visualizações do aplicativo. Isso é feito em 
um arquivo separado geralmente chamado app-routing.module.ts (ou qualquer outro nome que você escolher). Neste 
arquivo, você importa os componentes que serão associados a cada rota e define um objeto de configuração que mapeia 
as URLs para os componentes.

Usar a diretiva router-outlet no template do componente raiz:
O próximo passo é usar a diretiva router-outlet no template do componente raiz do aplicativo (app.component.html). 
Essa diretiva indica onde os componentes associados a cada rota serão renderizados.

Diretivas: <router-outlet></router-outlet>

Com isso, o Angular irá carregar o componente correspondente à rota atual dentro do elemento <router-outlet> no 
template do componente raiz.

Agora, quando o usuário navegar para uma determinada URL, o Angular irá carregar o componente correspondente à rota 
definida e renderizá-lo dentro do <router-outlet> sem recarregar toda a página.

Além disso, você pode configurar outras funcionalidades avançadas, como roteamento aninhado, parâmetros de rota, 
redirecionamentos, entre outros. As rotas no Angular oferecem muitas possibilidades para criar uma experiência de 
navegação rica e dinâmica em aplicativos web.

----------//----------

Vamos criar um componente chamado Home e nesse componente vai ser a nossa Página Principal.

Vamos também fazer um componente Login, vale ressaltar que temos um problema, foi criado a tela 
de login no componente principal (app.component.html), e para resolver isso vamos criar um próprio componente 
para o login, pois é nesse componente que terá tudo relacionado ao login, desde a tela (front-end) até o service (back-end).
Portanto, vamos criar o componente Login e Home.

comandos:
ng g c Login
ng g c Home

Para criar a rota para a nossa Página Principal, vamos no nosso 'app-routing.module.ts' e criar a nossa rota
para a página Home e para a página Login. Vale ressaltar que é nesse arquivo que vão ser declarados todas as 
nossas rotas.

Codificação das rotas do Home e do Login (app-routing.module.ts):
const routes: Routes = [{path: 'home', component: HomeComponent}, 
{path: 'login', component: LoginComponent}, {path:'', component:LoginComponent}];

Este (path: '') é a raiz do projeto que é mapeada para a página de login.  

Próxima etapa é adicionar a diretiva <router-outlet></router-outlet> no 'app.component.html', pois o 
redirecionamento vai ser sempre para esse componente principal.  Por fim colocamos a propriedade de 
'link-router' e o valor da 'path' a ser redirecionado (/login) na tag onde vai ter a ação para o 
redirecionamento, por exemplo:

Código (login.component.html):
<button type="button" (click)="login()" routerLink="/home">Acessar</button>
                                                      ^
                                                      |
							                 {path: 'home', component: HomeComponent}

----------//----------

RouterModule (app-routing.module.ts) X Router

No Angular, o RouterModule e o Router são conceitos relacionados, mas têm finalidades diferentes:

RouterModule:
O RouterModule é um módulo que faz parte do pacote @angular/router e é usado para configurar e importar as 
rotas no aplicativo. Ele contém as funcionalidades necessárias para configurar as rotas, criar o sistema de 
navegação, fornecer os serviços relacionados a rotas e criar o <router-outlet> necessário para renderizar os 
componentes associados às rotas.

A configuração das rotas é feita através da definição de um array de objetos Routes que mapeiam URLs para 
componentes específicos. A configuração das rotas é feita geralmente em um módulo de rotas separado 
(como AppRoutingModule) e, em seguida, esse módulo de rotas é importado no módulo raiz do aplicativo 
(AppModule).


Router:
O Router é um serviço fornecido pelo módulo RouterModule e é responsável por controlar a navegação e manipular 
as rotas em tempo de execução. Ele permite que você navegue para rotas específicas, obtenha informações sobre 
a rota atual, manipule o histórico de navegação e faça redirecionamentos, entre outras funcionalidades 
relacionadas a rotas.

Você pode injetar o serviço Router em componentes ou serviços para interagir com a navegação. Com o Router, 
você pode usar métodos como navigate(), navigateByUrl(), navigateByUrlTree(), navigateByData(), entre outros, 
para realizar a navegação programaticamente.

  -> navigate(): Navega para uma rota específica com base no caminho fornecido como argumento. É um método 
     assíncrono que retorna uma Promise<boolean> que resolve como true se a navegação foi bem-sucedida e false 
	 caso contrário.

  -> navigateByUrl(): Navega para uma rota específica com base na URL fornecida como argumento. A URL completa 
     deve ser especificada. 

  -> navigateByUrlTree(): Navega para uma rota específica com base na URL fornecida como argumento, mas 
     retorna uma árvore de UrlTree que representa a rota, em vez de navegar diretamente.

  -> navigateByData(): Navega para uma rota com base nos dados (data) associados a uma rota específica. Isso é 
     útil quando você possui rotas nomeadas com dados personalizados. 

  -> navigateByUrlAndReplace(): Navega para uma rota específica com base na URL fornecida como argumento, 
     substituindo a entrada atual do histórico de navegação.	 

Esses são alguns dos principais métodos disponíveis no Router. Cada um desses métodos é usado para controlar a 
navegação e manipular o histórico de navegação do aplicativo Angular. O Router também fornece outras 
propriedades úteis e eventos para interagir com a navegação e as rotas do aplicativo. Para usá-lo, você precisa 
injetá-lo no componente ou serviço onde deseja manipular a navegação.

Em resumo, o RouterModule é usado para configurar e importar as rotas no aplicativo, enquanto o Router é um 
serviço fornecido pelo RouterModule que permite controlar a navegação e manipular as rotas programaticamente. 
Juntos, eles formam o sistema de navegação poderoso e flexível do Angular.

------------------------------------------------------- // -------------------------------------------------------
Criando um service Interceptor para atribuir o token no cabeçalho.

Para criar vamos ao terminal - comandos:

PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular> cd .\Projeto-Angular-REST\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST> cd .\src\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src> cd .\app\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app> cd .\service\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app\service> ng generate service HeaderInterceptor --skipTests=true

----------//----------

Vamos utilizar a interface `HttpInterceptor` que permite criar interceptadores personalizados para manipular 
solicitações HTTP antes que elas sejam enviadas ao servidor e respostas HTTP antes que sejam retornadas ao 
código que fez a chamada. Isso permite que você modifique, adicione ou remova headers, manipule erros, adicione 
lógica de autenticação ou qualquer outra operação de pré-processamento e pós-processamento nas solicitações e 
respostas.

Para criar um interceptor personalizado, você precisa implementar a interface `HttpInterceptor`. A interface 
`HttpInterceptor` tem um único método que deve ser implementado:

```typescript
interface HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
}
```

O método `intercept` recebe dois parâmetros:

1. `req: HttpRequest<any>`: A solicitação HTTP original que está prestes a ser enviada ao servidor.

2. `next: HttpHandler`: O próximo manipulador HTTP na cadeia de interceptadores. Ele representa o próximo passo 
do processo de envio da solicitação ao servidor.

Os interceptors são uma ferramenta poderosa para adicionar comportamentos globais de manipulação de solicitações 
e respostas em um aplicativo Angular. Eles ajudam a modularizar a lógica comum de HTTP em uma classe 
reutilizável e facilitam a implementação de recursos como autenticação, manipulação de cabeçalhos, tratamento 
de erros e muito mais em uma única camada.

----------//----------

Explicando o script criado no 'header-interceptor.service.ts':

Interceptors são usados para interceptar e modificar solicitações HTTP antes de serem enviadas ao servidor e 
interceptar e modificar respostas HTTP antes de serem retornadas ao código que fez a chamada.

Detalhando passo a passo:

1. `intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>`: Esse é o método de 
interceptação, definido pela interface `HttpInterceptor`. Ele é responsável por receber a solicitação original 
(`req`) e o próximo manipulador HTTP (`next`).

2. `if (localStorage.getItem('token') != null) { ... }`: O interceptor verifica se há um token no 
`localStorage`. O `localStorage` é uma API do navegador que permite armazenar dados no cliente.

3. `const token = 'Bearer ' + localStorage.getItem('token');`: Se houver um token no `localStorage`, ele é 
recuperado e adicionado ao cabeçalho de autorização. O token é formatado no padrão "Bearer" que é comumente 
usado para autenticação com tokens JWT.

4. `const tokenRequest = req.clone({ headers: req.headers.set('Authorization', token) });`: A solicitação 
original é clonada (`req.clone()`) para que a solicitação original não seja modificada. Em seguida, o token de 
autorização é adicionado ao cabeçalho da solicitação clonada.

5. `return next.handle(tokenRequest);`: A requisição modificada é enviada ao próximo manipulador HTTP 
(`next.handle()`) para continuar o fluxo da solicitação. Isso permite que outros interceptors ou o cliente 
HTTP façam mais modificações, se necessário, antes que a solicitação seja realmente enviada ao servidor.

6. `return next.handle(req);`: Se não houver token no `localStorage`, a solicitação original é enviada sem 
nenhuma modificação.

Em resumo, esse interceptor é responsável por adicionar um cabeçalho de autorização com um token JWT na 
solicitação HTTP, caso um token esteja presente no `localStorage`. Isso pode ser usado para autenticar as 
chamadas HTTP em APIs protegidas por autenticação de token JWT. Caso contrário, a solicitação é enviada sem 
qualquer modificação.

----------//----------

Esse script define um módulo chamado HttpInterceptorModule, que configura um interceptor personalizado para 
manipular solicitações HTTP no Angular.

Vamos analisar o código linha por linha:

@NgModule({ ... }): Este é o decorator NgModule, que é usado para definir um módulo no Angular.

providers: [...]: A propriedade providers do decorator NgModule é usada para registrar os provedores de serviços 
que serão disponibilizados dentro do módulo.

[...]: A propriedade providers é configurada como um array, pois você pode registrar vários provedores de 
serviços no mesmo módulo.

{ ... }: Os objetos dentro do array são os provedores de serviço que estão sendo registrados.

provide: HTTP_INTERCEPTORS: Aqui, estamos usando a constante HTTP_INTERCEPTORS do pacote @angular/common/http. 
Essa constante é uma chave especial que informa ao Angular que estamos registrando um interceptor HTTP.

useClass: HeaderInterceptorService: Aqui, estamos usando o valor HeaderInterceptorService como o serviço que 
implementa o interceptor. Isso significa que o Angular usará a classe HeaderInterceptorService como o 
interceptor para manipular as solicitações HTTP.

multi: true: Essa propriedade indica que estamos registrando um provedor de serviço que pode ter várias 
implementações. Como estamos registrando um interceptor HTTP, é importante definir multi: true para garantir 
que não substituamos outros interceptores já registrados em outros módulos.

Portanto, com esse código, estamos registrando o serviço HeaderInterceptorService como um interceptor HTTP no 
módulo HttpInterceptorModule. Isso fará com que o Angular adicione automaticamente esse interceptor a uma lista 
de interceptores globais que serão usados para manipular solicitações HTTP em todo o aplicativo.

Lembre-se de que o HeaderInterceptorService deve implementar a interface HttpInterceptor para que o Angular 
possa identificá-lo como um interceptor válido. Uma vez registrado, o HeaderInterceptorService terá a 
oportunidade de manipular solicitações HTTP antes de serem enviadas ao servidor ou respostas HTTP antes de 
serem retornadas ao código que fez a chamada. Isso permite que você adicione headers personalizados, autentique 
solicitações, manipule erros e faça outras ações comuns de pré-processamento e pós-processamento para todas as 
solicitações do aplicativo.

----------//----------

Não pode esquecer de declarar o 'HttpInterceptorModule' no 'app.module.ts'.

Vale ressaltar que só precisa implementar esse service uma única vez, pois ele servirá para todas as requisições.
Ou seja, tem o token então é só capturar e jogar no back-end (API Spring Boot).

------------------------------------------------------- // -------------------------------------------------------

Class Model e Service do usuário

1º Criar um UsuarioService - comando: ng generate service UsuarioService --skipTests=true

Vamos utilizar as Classes HttpClient e Observable.

HttpClient:

A classe `HttpClient` é uma parte importante do módulo `@angular/common/http` e é usada para fazer chamadas 
HTTP em aplicativos Angular. Essa classe fornece uma API fácil de usar para enviar e receber dados por meio de 
solicitações HTTP, como GET, POST, PUT, DELETE e outras.

Aqui estão algumas das principais características e funcionalidades da classe `HttpClient`:

1. Realização de solicitações HTTP:
   - O `HttpClient` oferece métodos para fazer solicitações HTTP, como GET, POST, PUT, DELETE, etc.
   - Os métodos fornecidos retornam um `Observable` que representa a resposta HTTP.
   - Exemplo: `get()`, `post()`, `put()`, `delete()`.

2. Envio de dados na solicitação:
   - O `HttpClient` permite enviar dados no corpo da solicitação, seja em formato JSON, formulário, texto ou blob.
   - Exemplo: `post(url, data)`.

3. Definição de headers personalizados:
   - É possível definir headers personalizados para as solicitações HTTP, como headers de autorização, headers 
     de conteúdo, etc.
   - Exemplo: `setHeaders()`.

4. Observables:
   - O `HttpClient` trabalha com Observables do pacote `rxjs`.
   - Isso permite usar os operadores do `rxjs` para manipular a resposta, como mapeamento, filtragem, tratamento 
     de erros, etc.
   - Exemplo: `pipe()` e `subscribe()`.

5. Interceptors:
   - O `HttpClient` suporta interceptadores HTTP personalizados para pré-processar e pós-processar as 
     solicitações e respostas HTTP.
   - Interceptors são úteis para adicionar headers globais, autenticação, manipulação de erros, etc.

6. Tratamento de erros:
   - O `HttpClient` lida com erros de solicitação HTTP e fornece mecanismos para capturar e tratar erros.
   - Exemplo: `catchError()`.

7. Consulta de parâmetros:
   - O `HttpClient` permite passar parâmetros de consulta nas solicitações HTTP.
   - Exemplo: `get(url, { params: new HttpParams().set('param', 'value') })`.

8. Tipagem:
   - O `HttpClient` suporta a tipagem das respostas, o que facilita o trabalho com os dados retornados.
   - Exemplo: `get<MyData>(url)`.

Você pode usar o `HttpClient` para fazer solicitações HTTP em APIs RESTful, consumir recursos da web, 
autenticar solicitações, enviar dados ao servidor e muito mais. A classe `HttpClient` é uma das principais 
ferramentas para lidar com comunicações HTTP em aplicativos Angular.


Observable:
A classe `Observable` faz parte do pacote `rxjs` (Reactive Extensions for JavaScript) que é usado extensivamente 
no Angular para trabalhar com programação reativa e fluxos de dados assíncronos. O `Observable` é uma das 
principais construções do `rxjs` e é a base para criar fluxos de eventos que podem ser observados e reagidos a 
mudanças.

Vamos explorar as principais características da classe `Observable`:

1. Representação de fluxos de eventos:
   - Um `Observable` é uma representação de um fluxo de eventos que pode ser assíncrono.
   - Ele pode emitir zero ou mais valores (eventos) ao longo do tempo e também pode emitir um valor de erro ou 
     um sinal de conclusão (complete).

2. Assinatura:
   - Para obter os valores emitidos por um `Observable`, é necessário se inscrever (assinar) ao mesmo.
   - A inscrição é feita usando o método `subscribe()` do `Observable`.

3. Operadores:
   - O `rxjs` fornece uma ampla variedade de operadores para manipular, transformar e filtrar fluxos de dados 
     de `Observable`.
   - Os operadores são funções que podem ser encadeadas para processar os valores emitidos pelo `Observable`.

4. Tratamento de erros:
   - O `Observable` permite tratar erros usando o operador `catchError()` ou `retry()`.

5. Cancelamento:
   - As inscrições em `Observable` podem ser canceladas usando o método `unsubscribe()` para liberar recursos e 
     evitar vazamentos de memória.

6. Programação reativa:
   - O `rxjs` segue o paradigma de programação reativa, onde você define reações a eventos assíncronos, em vez 
     de codificar uma sequência de passos imperativos.

7. Composição:
   - Os `Observables` podem ser combinados e compostos usando operadores como `merge`, `concat`, `forkJoin`, 
     `combineLatest`, etc.

8. Tempo:
   - O `rxjs` fornece operadores relacionados a tempo, como `interval`, `timer`, `debounceTime`, etc., para 
     trabalhar com temporizadores e atrasos.

O `rxjs` é uma ferramenta poderosa que facilita a manipulação de fluxos de eventos assíncronos e a programação 
reativa no Angular. Os `Observables` são amplamente utilizados para lidar com chamadas HTTP, eventos do usuário, 
animações, temporizadores e muito mais.

----------//----------

Exemplificando o código do usuario-service.service.ts: 

- `getStudentList()`: Este é o nome do método que retorna uma lista de estudantes. Esse método faz uma 
  solicitação HTTP para obter a lista de estudantes de alguma API.

- `Observable<any>`: O método retorna um `Observable`, que é uma estrutura fornecida pelo pacote `rxjs` no 
   Angular. `Observable` é usado para representar um fluxo de dados assíncronos. O tipo `<any>` é usado aqui 
   para indicar que não sabemos exatamente qual será o tipo de dados da resposta.

- `return this.http.get<any>(AppConstants.baseUrl);`: Nesta linha, o método faz uma solicitação HTTP GET usando 
  o serviço `HttpClient` do Angular. A propriedade `http` foi injetada no serviço por meio de injeção de 
  dependência, permitindo que o serviço faça chamadas HTTP.

- `this.http.get<any>(...)`: `this.http.get()` é o método do `HttpClient` usado para fazer uma solicitação HTTP 
   GET. Ele retorna um `Observable` que emite a resposta da solicitação.

- `AppConstants.baseUrl`: Este é o URL base para a API REST que o aplicativo está consumindo, que é definido em uma classe de 
   constantes chamada `AppConstants`. O método `getStudentList()` usará esse URL como destino da solicitação 
   GET para obter a lista de estudantes.

Quando esse método `getStudentList()` é chamado, ele retornará um `Observable` que representa a resposta da 
solicitação HTTP. Esse `Observable` pode ser assinado por componentes ou outros serviços para obter a lista de 
estudantes ou realizar outras ações quando os dados estiverem disponíveis.

------------------------------------------------------- // -------------------------------------------------------
Criando o model UsuarioService
Para criar a Class Usuario dentro do pacote model - comando: ng generate class User --skipTests=true

PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular> cd .\Projeto-Angular-REST\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST> cd .\src\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src> cd .\app\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app> cd .\model\
PS C:\AngularComSpringBoot\ProjetoSpringBootApiComAngular\Projeto-Angular-REST\src\app\model> ng generate class User --skipTests=true

Na API SpringBoot possui a classe Usuario, logo temos que criar no mesmo lado do front-end uma classe que 
representa o back-end da API. Portanto, os atributos definidos na Classe Usuario no back-end será o mesmo 
para a classe Usuario no front-end. Vale ressaltar que o nome da classe não interfere (pois é desacoplado
com o back-end, a única forma de comunicação é a partir do json, logo temos que criar uma classe na parte do 
front-end que representa os dados que virão da API Spring Boot, logo os dados definidos pelo atributo tem que 
ter os mesmos nomes para que haja compatibilidade entre os dados), somente interfere 
os atributos. Na classe front-end é nomeada de 'User' e na classe do back-end é nomeada de 'Usuario' e os 
atributos possuem o mesmo nome tanto na classe Usuario da API(back-end) quanto na classe User do Angular (front-end).





